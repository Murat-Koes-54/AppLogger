apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'androidx.navigation.safeargs.kotlin'

android {
    compileSdkVersion Config.compileSdkVersion
    buildToolsVersion Versions.build_tools

    defaultConfig {
        applicationId Config.id
        minSdkVersion Config.minSdkVersion
        targetSdkVersion Config.targetSdkVersion
        versionCode 1
        versionName Config.generateDebugVersionName()

        resValue "bool", "IS_DEBUG", "false"
        buildConfigField "boolean", "USE_RELEASE_VERSIONING", "false"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            shrinkResources false
            minifyEnabled false
            applicationIdSuffix ".debug"
            resValue "bool", "IS_DEBUG", "true"
            pseudoLocalesEnabled true
        }
        release {
            buildConfigField "boolean", "USE_RELEASE_VERSIONING", "true"
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    splits {
        abi {
            enable true

            reset()

            include "x86", "armeabi-v7a", "arm64-v8a", "x86_64"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'META-INF/atomicfu.kotlin_module'
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }
}

android.applicationVariants.all { variant ->

    def isDebug = variant.buildType.resValues['IS_DEBUG']?.value ?: false
    def useReleaseVersioning = variant.buildType.buildConfigFields['USE_RELEASE_VERSIONING']?.value ?: false
    def versionName = Config.releaseVersionName(project)

    println("----------------------------------------------")
    println("Variant name:      " + variant.name)
    println("Application ID:    " + [variant.mergedFlavor.applicationId, variant.buildType.applicationIdSuffix].findAll().join())
    println("Build type:        " + variant.buildType.name)
    println("Flavor:            " + variant.flavorName)

    if (useReleaseVersioning) {
        println("versionName override: $versionName")

        variant.outputs.each { output ->
            output.versionNameOverride = versionName
        }
    }

    if(!isDebug) {
        buildConfigField 'boolean', 'CRASH_REPORTING', 'true'
    } else {
        buildConfigField 'boolean', 'CRASH_REPORTING', 'false'
    }

    def buildDate = Config.generateBuildDate()
    if (isDebug) {
        buildConfigField 'String', 'BUILD_DATE', '"debug build"'
    } else {
        buildConfigField 'String', 'BUILD_DATE', '"' + buildDate + '"'
    }
}

androidExtensions {
    experimental = true
}

dependencies {

    implementation(KotlinDeps.kotlin_stdlib)
    implementation(CoroutinesDeps.kotlin_coroutines)
    implementation(CoroutinesDeps.kotlin_coroutines_android)
    testImplementation(CoroutinesDeps.kotlin_coroutines_test)
    implementation(AndroidXDeps.androidx_appcompat)
    implementation(AndroidXDeps.androidx_constraint_layout)
    implementation(AndroidXDeps.androidx_coordinator_layout)

    implementation 'androidx.core:core-ktx:1.5.0'
    implementation(MaterialDesignDeps.material_design)
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
}

task buildTranslationArray {
    def foundLocales = new StringBuilder()
    foundLocales.append("new String[]{")

    fileTree("src/main/res").visit { FileVisitDetails details ->
        if(details.file.path.endsWith("${File.separator}strings.xml")){
            def languageCode = details.file.parent.tokenize(File.separator).last().replaceAll('values-','').replaceAll('-r','-')
            languageCode = (languageCode == "values") ? "en-US" : languageCode
            foundLocales.append("\"").append(languageCode).append("\"").append(",")
        }
    }

    foundLocales.append("}")
    def foundLocalesString = foundLocales.toString().replaceAll(',}','}')
    android.defaultConfig.buildConfigField "String[]", "SUPPORTED_LOCALE_ARRAY", foundLocalesString
}